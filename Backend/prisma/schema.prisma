generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

model Users {
  id               String           @id @default(uuid())
  name             String
  email            String           @unique
  location         String
  password         String
  role             String           @default("user")
  resetToken       String?
  resetTokenExpiry DateTime?
  reports          IncidentReport[]
  createdPolls     Poll[]           @relation("PollCreator")
  votes            PollVote[]
}

model IncidentReport {
  id          String          @id @default(uuid())
  title       String
  description String
  location    String
  status      String          @default("pending")
  userId      String
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  category    String
  media       IncidentMedia[]
  user        Users           @relation(fields: [userId], references: [id])
}

model IncidentMedia {
  id         String         @id @default(uuid())
  url        String
  type       String
  incidentId String
  uploadedAt DateTime       @default(now())
  incident   IncidentReport @relation(fields: [incidentId], references: [id], onDelete: Cascade)
}

model Poll {
  id          String       @id @default(uuid())
  question    String
  description String?
  status      String       @default("unverified")
  createdBy   String
  createdAt   DateTime     @default(now())
  expiresAt   DateTime?
  options     PollOption[]
  creator     Users        @relation("PollCreator", fields: [createdBy], references: [id])
  votes       PollVote[]

  @@map("polls")
}

model PollOption {
  id     String     @id @default(uuid())
  text   String
  pollId String
  poll   Poll       @relation(fields: [pollId], references: [id], onDelete: Cascade)
  votes  PollVote[]
}

model PollVote {
  id       String     @id @default(uuid())
  userId   String
  pollId   String
  optionId String
  option   PollOption @relation(fields: [optionId], references: [id], onDelete: Cascade)
  poll     Poll       @relation(fields: [pollId], references: [id], onUpdate: NoAction)
  user     Users      @relation(fields: [userId], references: [id], onUpdate: NoAction)

  @@unique([userId, pollId])
}
